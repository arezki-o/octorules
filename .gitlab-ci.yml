stages:
     - deploy   
rules-job:
     stage: deploy
     tags: ["sync"]
     rules:
      - changes:
        - ".gitlab-ci.yml"
        when: never
      - when: always
      - changes:
        - result/*
      #   - if  ! grep "\.ndjson$" <(git diff --name-only HEAD~1); then exit; fi; 
     script:
         - cat $input
         - echo "${CI_COMMIT_SHA}"
         - loc=$(pwd)
         - rule=`git diff-tree --no-commit-id --name-only -r $CI_COMMIT_SHA`
         - echo $rule
         - cat $rule | tomlq '.' | cat > ${rule%.*}.json
         - ls -l
         - cat ${rule%.*}.json  | jq -c '.[]' > ${rule%.*}.ndjson
         - directory=$(cat "${rule%.*}.ndjson"  | jq .rule_id | head -n 1| sed -e 's/"//g' )
         - mkdir -p /home/gitlab-runner/sync-rules/$directory 
         - mv "${rule%.*}.ndjson" /home/gitlab-runner/sync-rules/$directory/
         - cd /home/gitlab-runner/sync-rules/$directory/
         - r=`echo ${rule%.*}.ndjson | awk -F/ '{print $2}'`
         - mv $r rule.ndjson
         - cp ../last-toml.yml .
         - ansible-playbook /home/gitlab-runner/sync-rules/$directory/last-toml.yml --vault-password-file $input 
         - if grep -q "Endpoint Security" rule.ndjson; then ena=1; else ena=0 ;fi
         - echo $ena
         - cd $loc
         - echo $ena
         - bash /home/gitlab-runner/sync-rules/rulesync.sh `git diff-tree --no-commit-id --name-only -r $CI_COMMIT_SHA` `echo $ena`

         - cd ${CI_PROJECT_DIR}/rules/_deprecated/
         - for rule in *.toml;do ls $rule >> deprecatedrules;done
         - if cmp --silent -- deprecatedrules /home/gitlab-runner/sync-rules/deprecatedrules; then ans=1 ;else ans=2 && grep -F -x -v -f /home/gitlab-runner/sync-rules/deprecatedrules deprecatedrules >> /home/gitlab-runner/sync-rules/newdeprecatedrules && cp -p deprecatedrules /home/gitlab-runner/sync-rules/ ; fi
         - bash /home/gitlab-runner/sync-rules/depsync.sh $ans